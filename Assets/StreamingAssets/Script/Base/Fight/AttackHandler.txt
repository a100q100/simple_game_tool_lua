local attackDataBase = require 'Config.AttackDataBase'
local buff = require 'Script.Base.Creature.Buff'
local runTimeManager = require 'Script.Manager.RunTimeManager'

local attackHandler = Class("AttackHandler")

function attackHandler:ctor(parent)
    self.parent = parent

    self.gameObject = parent.gameObject
    self.transform = parent.transform

	self.buffsHandler = {}
	self.countHandler = {}

    self:init()
end

function attackHandler:init()
    if not self.gameObject then
        return
    end

    LuaEventManager.AddAnimationEvent(self.gameObject, function(funcName, col)
        self:onAnimationEvent(funcName, col)
    end)
end

function attackHandler:hurt(gameObject)

	local target = runTimeManager.getCreature(gameObject)

	if not target or target.gameObject == self.gameObject then
		return
	end

	if not target.attribute then
		return
	end
	
	for i,v in pairs(self.buffsHandler) do
		if self.countHandler[i].curCount < self.countHandler[i].maxCount then
			self.countHandler[i].curCount = self.countHandler[i].curCount + 1

			target.attribute:addBuff(v)
		end
	end
end

function attackHandler:onAnimationEvent(funcName, col)
    if self[funcName] then
        self[funcName](self, col)
    end
end

function attackHandler:addAttackInstance(name)
	if not attackDataBase[name] or not attackDataBase[name].buffs then
		print("AttackDataBase can't find handler " .. name)
		return
	end

	self.buffsHandler[name] = {}
	self.countHandler[name] = {}

	self.buffsHandler[name] = buff.new(attackDataBase[name].buffs)
	self.countHandler[name].maxCount = attackDataBase[name].maxCount
	self.countHandler[name].curCount = 0
end

function attackHandler:removeAttackInstance(name)
	self.buffsHandler[name] = nil
	self.countHandler[name] = nil
end

function attackHandler:animateFinished(gameObject)

end

function attackHandler:playSound(id)

end

function attackHandler:playEffect(id)

end

function attackHandler:fire(id)

end

return attackHandler

