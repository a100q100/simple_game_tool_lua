local axe = Class()

function axe:ctor(parent)
	self.AnimIdle = "mdldecompiler.qc_skeleton|idle"
	self.AnimRun = "mdldecompiler.qc_skeleton|run"
	self.AnimAttackNormal = "mdldecompiler.qc_skeleton|attack_main"
	self.AnimDeath = "mdldecompiler.qc_skeleton|death"

	local prefabRes = Resources.Load("Prefabs/Axe")

	if parent then
		local transform = parent:GetComponent(Transform)
		self.instance = GameObject.Instantiate(prefabRes, transform.position, transform.rotation)
	end
end

function axe:init()
	self.model = self.instance.transform:Find("model")
	self.animation = self.model:GetComponent(Animation)
	self.rigidbody = self.instance:GetComponent(Rigidbody)
	self.transform = self.instance:GetComponent(Transform)
	
	--Test : add animation finished callback
		local animClip = self.animation:GetClip(self.AnimRun)
		local animationEvent = AnimationEvent()
		animationEvent.time = animClip.length * 2 / 3
		animationEvent.functionName = "onAnimationFinished"
		LuaEventManager.addAnimCallback(self.model.gameObject, function()
			self:onAnimationFinished()	
		end)
		animClip:AddEvent(animationEvent)
	--
	
	self.rigidbody.velocity = Vector3(-1.5,0,0)
	self.transform:Rotate(Vector3(0,-90,0))
	
	self.animation:Play(self.AnimRun)
end

function axe:onAnimationFinished()
	print("onAnimationFinished")
	self.animation:Play(self.AnimIdle)
	self.rigidbody.velocity = Vector3(0,0,0)
end

function axe:fixedUpdate()
	--self.rigidbody.velocity = Vector3(-0.2,0,0)
end

function axe:update()
end

return axe