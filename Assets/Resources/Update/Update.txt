import "UnityEngine"

if not UnityEngine.GameObject then
	error("Click Make/All to generate lua wrap file")
end

local Update={}

local disableUpdate = true

UpdateFileStateType = {
    BeginDownLoad = 0,
    FinishDownload = 1,
    MoveFile = 2,
    Finished = 3
}

DownloadFileType = {
    TypeText = 0,
    TypeAssetBundle = 1,
    None = 2
}

UpdateState = {
	Verifying = "Verifying",
	Updating = "Updating",
	Finished = "Finished",
}

function main()
	if disableUpdate then
		local Test = require 'Script.Main'
		Test()
		return
	end

	local prefabPath = "/AssetBunle/UI/Update/SceneUpdate.assetbundle"
	local prefabName = "SceneUpdate"
	local prefabFullPath = string.format("%s%s", LuaManager.getAssetBundlePath(), prefabPath)
	local sceneUpdatePath = "Update/SceneUpdate.txt"
	local sceneUpdateFullPath = string.format("%s/%s", LuaManager.getAssetBundlePath(), sceneUpdatePath)

	local loadUpdateScene = function()
		if not FileManager.isFileExist(prefabFullPath) then
			UpdateManager.getInstance():download(
				string.format("file:///%s%s", UpdateManager.UpdateTest, prefabPath),
				string.format("%s%s", LuaManager.getConfigPath(), prefabPath),
				DownloadFileType.TypeAssetBundle,
				function()
					ResourceManager.getInstance():loadAssetBundleByPath(prefabPath, prefabName, function(obj)
						print("load finished")
						local SceneUpdate = require 'Update.SceneUpdate'
						SceneUpdate.init(obj)
					end)
				end
			)
		else
			ResourceManager.getInstance():loadAssetBundleByPath(prefabPath, prefabName, function(obj)
				print("load finished")
				local SceneUpdate = require 'Update.SceneUpdate'
				SceneUpdate.init(obj)
			end)
		end		
	end
	
	if not FileManager.isFileExist(sceneUpdateFullPath) then
		UpdateManager.getInstance():download(
			string.format("file:///%s/%s", UpdateManager.UpdateTest, sceneUpdatePath),
			string.format("%s/%s", LuaManager.getConfigPath(), sceneUpdatePath),
			DownloadFileType.TypeText,
			function()
				loadUpdateScene()
			end
		)
	else
		loadUpdateScene()
	end
end